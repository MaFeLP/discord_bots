name: "Release"

on:
  push:
    tags: "v*"

env:
  CARGO_TERM_COLOR: always
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-release:
    name: "Release"
    runs-on: "ubuntu-latest"
    permissions:
      contents: write

    steps:
      - name: Make repository name lowercase
        id: name
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_NAME }}

      - uses: actions/checkout@v4

      - name: Extract tag name
        id: tag_name
        run: echo NAME=$(echo ${{ github.ref }} | cut -d / -f 3) >> "$GITHUB_OUTPUT"

      - name: Setup cross compilation
        run: |
          # Cargo configuration
          mkdir -vp .cargo
          cat > .cargo/config.toml << __EOF__
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"

          [target.x86_64-pc-windows-gnu]
          linker = "x86_64-w64-mingw32-gcc"
          __EOF__
          # Add rust targets
          rustup target add aarch64-unknown-linux-gnu
          rustup target add x86_64-pc-windows-gnu
          # Install linkers
          sudo apt-get install -y gcc gcc-aarch64-linux-gnu mingw-w64

      - name: Build cross platform
        run: |
          mkdir /tmp/release-files
          cargo build --release --target aarch64-unknown-linux-gnu
          mv target/aarch64-unknown-linux-gnu/release/xd_bot ./aarch64-linux-discord_bots
          cargo build --release --target x86_64-pc-windows-gnu
          mv target/x86_64-pc-windows-gnu/release/xd_bot.exe ./win64-discord_bots.exe
          cargo build --release
          mv target/release/xd_bot ./amd64-linux-discord_bots

      - name: Create Release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: LICENSE,aarch64-linux-discord_bots,win64-discord_bots.exe,amd64-linux-discord_bots
          draft: true
          tag: ${{ steps.tag_name.outputs.NAME }}
          name: ${{ steps.tag_name.outputs.NAME }}

# When the release has been created: create docker images in the same step to save computing time
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action

      # Build arm image
      - name: Build and push Docker image
        uses: docker/build-push-action@16ebe778df0e7752d2cfcbd924afdbbd89c1a755
        with:
          file: .github/action-assets/multi-platform.dockerfile
          context: .
          build-args: |
            docker_arch=linux/arm64
            binary_name=aarch64-linux-discord_bots
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ steps.name.outputs.lowercase }}:${{ steps.tag_name.outputs.NAME }}-arm
            ${{ env.REGISTRY }}/${{ steps.name.outputs.lowercase }}:latest-arm
          labels: ${{ steps.meta.outputs.labels }}

      # Build linux/amd64 image
      - name: Build and push Docker image
        uses: docker/build-push-action@16ebe778df0e7752d2cfcbd924afdbbd89c1a755
        with:
          file: .github/action-assets/multi-platform.dockerfile
          context: .
          build-args: |
            docker_arch=linux/amd64
            binary_name=amd64-linux-discord_bots
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ steps.name.outputs.lowercase }}:${{ steps.tag_name.outputs.NAME }}
            ${{ env.REGISTRY }}/${{ steps.name.outputs.lowercase }}:latest
          labels: ${{ steps.meta.outputs.labels }}
